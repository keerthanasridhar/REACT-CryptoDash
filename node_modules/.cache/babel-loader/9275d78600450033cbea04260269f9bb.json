{"ast":null,"code":"import _objectSpread from \"/Users/keerthana/Desktop/gitproj/cryptodash/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _defineProperty from \"/Users/keerthana/Desktop/gitproj/cryptodash/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/Users/keerthana/Desktop/gitproj/cryptodash/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/keerthana/Desktop/gitproj/cryptodash/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"/Users/keerthana/Desktop/gitproj/cryptodash/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/keerthana/Desktop/gitproj/cryptodash/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/keerthana/Desktop/gitproj/cryptodash/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/keerthana/Desktop/gitproj/cryptodash/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/keerthana/Desktop/gitproj/cryptodash/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/keerthana/Desktop/gitproj/cryptodash/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/keerthana/Desktop/gitproj/cryptodash/src/App/AppProvider.js\";\nimport React from 'react';\nimport _ from 'lodash';\nimport moment from 'moment';\n\nvar cc = require('cryptocompare');\n\nvar MAX_FAVORTITES = 10;\nvar TIME_UNITS = 10;\nexport var Appcontext = React.createContext();\nexport var AppProvider =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AppProvider, _React$Component);\n\n  function AppProvider(props) {\n    var _this;\n\n    _classCallCheck(this, AppProvider);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AppProvider).call(this, props));\n\n    _this.componentDidMount = function () {\n      _this.fetchCoins();\n\n      _this.fetchPrices();\n\n      _this.fetchHistoric();\n    };\n\n    _this.addCoin = function (key) {\n      var favorites = _toConsumableArray(_this.state.favorites);\n\n      if (favorites.length <= MAX_FAVORTITES) {\n        favorites.push(key);\n\n        _this.setState({\n          favorites: favorites\n        });\n      }\n    };\n\n    _this.removeCoin = function (key) {\n      var favorites = _toConsumableArray(_this.state.favorites);\n\n      _this.setState({\n        favorites: _.pull(favorites, key)\n      });\n    };\n\n    _this.isInFavorites = function (key) {\n      return _.includes(_this.state.favorites, key);\n    };\n\n    _this.fetchCoins =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var coinList;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return cc.coinList();\n\n            case 2:\n              coinList = _context.sent.Data;\n\n              _this.setState({\n                coinList: coinList\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n    _this.fetchPrices =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var prices;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!_this.state.firstVisit) {\n                _context2.next = 2;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 2:\n              _context2.next = 4;\n              return _this.prices();\n\n            case 4:\n              prices = _context2.sent;\n\n              _this.setState({\n                prices: prices\n              });\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n    _this.fetchHistoric =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      var results, historical;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!_this.state.firstVisit) {\n                _context3.next = 2;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 2:\n              _context3.next = 4;\n              return _this.historical();\n\n            case 4:\n              results = _context3.sent;\n              historical = [{\n                name: _this.state.currentFavorites,\n                data: results.map(function (ticker, index) {\n                  return [moment().subtract(_defineProperty({}, _this.state.timeInterval, TIME_UNITS - index)).valueOf(), ticker.USD];\n                })\n              }];\n\n              _this.setState({\n                historical: historical\n              });\n\n            case 7:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n    _this.prices =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4() {\n      var returnData, i, pricesData;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              returnData = [];\n              i = 0;\n\n            case 2:\n              if (!(i < _this.state.favorites.length)) {\n                _context4.next = 16;\n                break;\n              }\n\n              _context4.prev = 3;\n              _context4.next = 6;\n              return cc.priceFull(_this.state.favorites[i], 'USD');\n\n            case 6:\n              pricesData = _context4.sent;\n              returnData.push(pricesData);\n              _context4.next = 13;\n              break;\n\n            case 10:\n              _context4.prev = 10;\n              _context4.t0 = _context4[\"catch\"](3);\n              console.warn('Fetch price error:', _context4.t0);\n\n            case 13:\n              i++;\n              _context4.next = 2;\n              break;\n\n            case 16:\n              return _context4.abrupt(\"return\", returnData);\n\n            case 17:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this, [[3, 10]]);\n    }));\n\n    _this.historical = function () {\n      var promises = [];\n\n      for (var units = TIME_UNITS; units > 0; units--) {\n        promises.push(cc.priceHistorical(_this.state.currentFavourites, ['USD'], moment().subtract(_defineProperty({}, _this.state.timeInterval, units)).toDate()));\n      }\n\n      return Promise.all(promises);\n    };\n\n    _this.confirmFavorites = function () {\n      var currentFavourites = _this.state.favorites[0];\n\n      _this.setState({\n        firstVisit: false,\n        page: 'dashboard',\n        currentFavourites: currentFavourites,\n        prices: null,\n        historical: null\n      }, function () {\n        _this.fetchPrices();\n\n        _this.fetchHistoric();\n      });\n\n      localStorage.setItem('cryptoDash', JSON.stringify({\n        favorites: _this.state.favorites,\n        currentFavourites: currentFavourites\n      }));\n    };\n\n    _this.setCurrentFavorite = function (sym) {\n      _this.setState({\n        currentFavourites: sym,\n        historical: null\n      }, _this.fetchHistoric);\n\n      localStorage.setItem('cryptoDash', JSON.stringify(_objectSpread({}, JSON.parse(localStorage.getItem('cryptoDash')), {\n        currentFavourites: sym\n      })));\n    };\n\n    _this.setFilteredCoins = function (filteredCoins) {\n      return _this.setState({\n        filteredCoins: filteredCoins\n      });\n    };\n\n    _this.setPage = function (page) {\n      _this.setState({\n        page: page\n      });\n    };\n\n    _this.changeChartSelect = function (value) {\n      console.log(value);\n\n      _this.setState({\n        timeInterval: value,\n        historical: null\n      }, _this.fetchHistoric);\n    };\n\n    _this.state = _objectSpread({\n      page: 'settings',\n      favorites: ['BTC', 'XRP']\n    }, _this.savedSetting(), {\n      setPage: _this.setPage,\n      timeInterval: _this.timeInterval,\n      addCoin: _this.addCoin,\n      removeCoin: _this.removeCoin,\n      isInFavorites: _this.isInFavorites,\n      filteredCoins: _this.filteredCoins,\n      confirmFavorites: _this.confirmFavorites,\n      setFilteredCoins: _this.setFilteredCoins,\n      setCurrentFavorite: _this.setCurrentFavorite,\n      changeChartSelect: _this.changeChartSelect\n    });\n    return _this;\n  }\n\n  _createClass(AppProvider, [{\n    key: \"savedSetting\",\n    value: function savedSetting() {\n      var cryptoDashData = JSON.parse(localStorage.getItem('cryptoDash'));\n\n      if (!cryptoDashData) {\n        return {\n          firstVisit: true,\n          page: 'settings',\n          currentFavourites: currentFavourites\n        };\n      }\n\n      var favorites = cryptoDashData.favorites,\n          currentFavourites = cryptoDashData.currentFavourites;\n      return {\n        favorites: favorites,\n        currentFavourites: currentFavourites\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Appcontext.Provider, {\n        value: this.state,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, this.props.children);\n    }\n  }]);\n\n  return AppProvider;\n}(React.Component);","map":{"version":3,"sources":["/Users/keerthana/Desktop/gitproj/cryptodash/src/App/AppProvider.js"],"names":["React","_","moment","cc","require","MAX_FAVORTITES","TIME_UNITS","Appcontext","createContext","AppProvider","props","componentDidMount","fetchCoins","fetchPrices","fetchHistoric","addCoin","key","favorites","state","length","push","setState","removeCoin","pull","isInFavorites","includes","coinList","Data","firstVisit","prices","historical","results","name","currentFavorites","data","map","ticker","index","subtract","timeInterval","valueOf","USD","returnData","i","priceFull","pricesData","console","warn","promises","units","priceHistorical","currentFavourites","toDate","Promise","all","confirmFavorites","page","localStorage","setItem","JSON","stringify","setCurrentFavorite","sym","parse","getItem","setFilteredCoins","filteredCoins","setPage","changeChartSelect","value","log","savedSetting","cryptoDashData","children","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\nimport moment from 'moment';\nconst cc = require('cryptocompare');\n\n\nconst MAX_FAVORTITES = 10;\nconst TIME_UNITS = 10;\nexport const Appcontext = React.createContext();\n\nexport class AppProvider extends React.Component {\n    constructor(props){   \n        super(props);\n        this.state = {\n            page: 'settings',\n            favorites:['BTC','XRP'],\n            ...this.savedSetting(),\n            setPage: this.setPage,\n            timeInterval:this.timeInterval,\n            addCoin: this.addCoin,\n            removeCoin: this.removeCoin,\n            isInFavorites: this.isInFavorites,\n            filteredCoins: this.filteredCoins,\n            confirmFavorites:this.confirmFavorites,\n            setFilteredCoins: this.setFilteredCoins,\n            setCurrentFavorite: this.setCurrentFavorite,\n            changeChartSelect: this.changeChartSelect\n        }\n    }\n\n    componentDidMount = ()=>{\n        this.fetchCoins();\n        this.fetchPrices();\n        this.fetchHistoric();\n    }\n\n    addCoin = key =>{\n        let favorites = [...this.state.favorites]\n        if(favorites.length <= MAX_FAVORTITES){\n            favorites.push(key);\n            this.setState({favorites})\n        }\n    }\n    removeCoin = key =>{\n        let favorites = [...this.state.favorites];\n        this.setState({favorites: _.pull(favorites,key)})\n    }\n\n    isInFavorites = key => _.includes(this.state.favorites,key)\n    \n    fetchCoins = async ()=>{\n        let coinList = (await cc.coinList()).Data;\n        this.setState({coinList})\n        \n    }\n\n    fetchPrices = async  ()=>{\n        if(this.state.firstVisit) return;\n        let prices = await this.prices();\n\n        this.setState({prices})\n    }\n    fetchHistoric = async ()=>{\n        if(this.state.firstVisit) return;\n        let results = await this.historical();\n\n       let historical =[\n           {\n            name: this.state.currentFavorites,\n            data: results.map((ticker,index)=> [\n                moment().subtract({[this.state.timeInterval]: TIME_UNITS - index}).valueOf(),\n                ticker.USD\n            ])\n       }]\n        this.setState({historical});\n   \n    }\n\n    prices = async ()=>{\n        let returnData = [];\n        for(let i=0;i<this.state.favorites.length;i++){\n            try{\n                let pricesData = await cc.priceFull(this.state.favorites[i],'USD')\n                returnData.push(pricesData)\n            } catch(e){\n                console.warn('Fetch price error:',e)\n            }\n        }\n        return returnData;\n    } \n\n    historical = () =>{\n        let promises = [];\n        for(let units = TIME_UNITS; units > 0; units--){\n            promises.push(\n                cc.priceHistorical(\n                    this.state.currentFavourites,\n                    ['USD'],\n                    moment()\n                    .subtract({ [this.state.timeInterval]:units })\n                    .toDate()\n                )\n            )\n        }\n        return Promise.all(promises);\n        }\n\n    confirmFavorites=()=>{\n        let currentFavourites = this.state.favorites[0];\n        this.setState({\n            firstVisit: false,\n            page: 'dashboard',\n            currentFavourites,\n            prices:null,\n            historical: null\n        },()=>{\n            this.fetchPrices();\n            this.fetchHistoric()\n        })\n       \n        localStorage.setItem('cryptoDash',JSON.stringify({\n            favorites: this.state.favorites,\n            currentFavourites   \n        }))\n    }\n\n    setCurrentFavorite = (sym)=>{\n        this.setState({\n            currentFavourites: sym,\n            historical :null\n        },this.fetchHistoric)\n        localStorage.setItem('cryptoDash',JSON.stringify({\n            ...JSON.parse(localStorage.getItem('cryptoDash')),\n            currentFavourites:sym\n        }))\n    }\n\n    savedSetting(){\n       \n        let cryptoDashData = JSON.parse(localStorage.getItem('cryptoDash'));\n        if(!cryptoDashData){ \n            return { firstVisit: true,\n                page: 'settings',\n                currentFavourites\n            }    \n        } \n       \n        let {favorites,currentFavourites}  = cryptoDashData;\n   \n            return {favorites,currentFavourites}\n    }\n\n    setFilteredCoins = (filteredCoins) => this.setState({filteredCoins})\n\n    setPage = page => {\n      \n        this.setState({page})\n\n    }\n    \n    changeChartSelect = (value)=>{\n        console.log(value)\n        this.setState({timeInterval:value,historical:null},this.fetchHistoric)\n    }\n    render() {\n        return (\n            <Appcontext.Provider value={this.state}>\n            {this.props.children}\n            </Appcontext.Provider>  \n        )\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}